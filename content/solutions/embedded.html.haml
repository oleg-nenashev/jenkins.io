---
layout: solution
title: "Jenkins in Embedded World"
usecase: "Embedded"
articles:
-
  - https://www.cloudbees.com/jenkins/juc-2015/presentations/JUC-2015-Europe-Jenkins-Based-CI-for-Nenashev.pdf
  - "Jenkins-Based CI for Heterogeneous Hardware/Software Projects"
  - "Oleg Nenashev"
  - "JUC2015/London"
-
 - https://www.cloudbees.com/blog/multi-stage-ci-jenkins-embedded-world
 - "Multi-Stage-CI with Jenkins in an Embedded World"
 - "Robert Martin, Steve Harris"
 - "JUC2014/Berlin"
-
 - http://www.testandverification.com/VerificationFutures/2015/Alan_Fitch.pdf
 - "CI for FPGA D&V"
 - "Alan Fitch"
 - "Verification Futures, 2015"
-
 - http://www.verilab.com/files/dvcon2012_ci_gray_mcgregor.pdf
 - "A 30 Minute Project Makeover Using Continuous Integration"
 - "JL Gray, Gordon McGregor"
 - "DVCon, 2012"
-
 - https://www.cloudbees.com/jenkins/juc-2015/presentations/JUC-2015-Europe-The-Famous-Cows-Woodall.pdf
 - "The Famous Cows of Cambridge: A Non-Standard Use Case for Jenkins"
 - "Sarah Woodall"
 - "JUC2015/London"
-
 - http://www.synopsys.com/news/pubs/snug/2013/canada/a1_danjou_paper.pdf
 - "FPGA CI with Jenkins (requires SNUG account)"
 - "Martin dâ€™Anjou"
 - "SNUG2013/Canada"
---

:markdown
  Jenkins is an extensible framework, which can be applied to many areas including 
  Embedded Software and even Hardware development.
  In the case of proper configuration Jenkins can be Jenkins can effectively operate with hardware permissions attached to Jenkins build agents.
  
  This page provides a brief overview of Embedded and Hardware projects automation with Jenkins.
  
  ## Use-cases
  
  ### Working with tools
  
  Jenkins has plugins for integration with common tools like GCC, Microsoft Visual Studio, etc.
  On the other hand, it has almost no integrations neither with domain-specific SW development nor with EDA tools.
  Availability of such these tools is critical for the automation flows in this area.
  
  However, any tool can be integrated into Jenkins using its command-line interface.
  Such tools can be invoked directly from shell build steps if they have a proper environment setup.
  
  1. Machine-specific variables (e.g. _LM_LICENSE_FILE_ or port specifications for peripherals) can be configured in Agent configuration in the _Environment Variables_ section. Once the variable is modified, the node should be reconnected.
  2. In order to integrate setup the tool environment, consider [Custom Tools Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Custom+Tools+Plugin).
  3. [EnvInject Plugin](https://wiki.jenkins-ci.org/display/JENKINS/EnvInject+Plugin) allows to setup custom environments on the job level.
  
  ### Working with FPGA boards and hardware peripherals
  
  Interaction with FPGA boards can be done via CLI tools as well.
  On the other hand, working with external perpherals requires prevention of conflicts between parallel builds utilizing the same resources.
  
  1. [Throttle Concurrent Builds Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Throttle+Concurrent+Builds+Plugin) allows preventing hardware and license usage conflicts.
  2. [Timeout Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Timeout+Plugin) allows to prevent hanging of Jenkins jobs if toolchain hangs (e.g. cable drivers).
  3. [Naginator Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Naginator+Plugin) allows to conditionally restart builds in the case of hardware issues.
  
  
  ### Working with computing grids

  Jenkins has a limited support of computing grids.
  Ideally for highly parallelized tests and builds it would be useful to provision Jenkins agents from computing grids
  There is a [LSF Cloud Plugin](https://wiki.jenkins-ci.org/display/JENKINS/lsf-cloud+Plugin) for [LSF](https://en.wikipedia.org/wiki/Platform_LSF), but for other grids there is no open-source plugins available.
  
  As a workaround, Jenkins job runs can invoke CLI tools in order to utilize computing grid resources.
  Such runs should be able submit task on computing grids, wait till their completion and then collect the execution results.
  Such jobs can be implemented, but due to the double scheduling there are many potential issues with stability of the instances (e.g. runaway grid tasks if Jenkins server shuts down during the build).
  Currently these issues has to be handled by the build scripts.
  
  
  ### Publishing reports in custom formats
  
  Jenkins does not have specific plugins for parsing reports from many tools.
  In such case the general recommendation is to convert the reports to formats supported by exising Jenkins plugins. 
  In the case of XML reports it can be done by a simple XSLT converter.
  As example, you can use the following plugins to publish results:
  
  * Unit testing results: [xUnit Plugin](https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin), which provides "Custom report" handler (Any XML => JUnit)
  * Timing analysiz reports: [Performance plugin](https://wiki.jenkins-ci.org/display/JENKINS/Performance+Plugin) (support JMeter-alike reports)
  * Coverages: [Cobertura Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Cobertura+Plugin) or [Emma Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Emma+Plugin)
   
     
  ## Presentations

Presentation by [Oleg Nenashev](https://github.com/oleg-nenashev/) at Jenkins User Conference 2015 in London.

%center
%iframe{:width => 560, :height => 315, :frameborder => 0,
  :src => 'https://speakerdeck.com/player/0e8b573ef5d84ec1abaf664ca6d791b8'}

Presentation by Robert Martin at Jenkins User Conference 2014 in Berlin.

%center
  %iframe{:width => 560, :height => 315, :frameborder => 0,
    :src => 'https://www.youtube-nocookie.com/embed/AB5RTabEtEI?rel=0'}
    
:markdown
  ### More presentations

  * ["kernelci.org: The Upstream Linux Kernel Validation Project"](https://fosdem.org/2016/schedule/event/kernelci/) by Milo Casagrande at FOSDEM 2016. KernelCI uses Jenkins as a backend automation engine.
  